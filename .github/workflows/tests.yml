name: tests

on: [push, pull_request]

jobs:
  tests:
    name: Run test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - run: node -e "console.log(process.env)"
      - uses: actions/checkout@v1

      - name: Install ruby on linux
        if: matrix.os != 'windows-latest'
        run: |
          sudo apt-get install -y libreadline-dev
          git clone https://github.com/rbenv/rbenv.git ~/.rbenv
          git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
          export PATH="$HOME/.rbenv/bin:$PATH"
          rbenv install 2.6.0
          echo "::add-path::~/.rbenv/versions/2.6.0/bin"

      - name: Install ruby on windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install ruby --version 2.6.0.1

      - name: Install bundler
        run: |
          gem install bundler:2.0.2

      - name: Run tests
        run: |
          bundle install
          bundle exec rake spec

  # ft-linux-macos:
  #   name: Run FTs on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   needs: test
  #   env:
  #     RUBY_PLUGIN_BRANCH: grpc
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v1
  #     - run: echo $RUBY_PLUGIN_BRANCH

  #     - name: Get rbenv and ruby-build
  #       run: |
  #         git clone https://github.com/rbenv/rbenv.git ~/.rbenv
  #         git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build

  #     - name: Install dependencies required to install Ruby
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get install -y libreadline-dev

  #     - name: Install ruby 2.6.0
  #       run: |
  #         export PATH="$HOME/.rbenv/bin:$PATH"
  #         rbenv install 2.6.0

  #     - name: Setup go 1.13.1
  #       uses: actions/setup-go@v1
  #       with:
  #         go-version: 1.13.1

  #     - name: Install gauge
  #       run: |
  #         git clone --depth=1 https://github.com/getgauge/gauge.git
  #         cd gauge
  #         go run build/make.go --verbose
  #         go run build/make.go --install --prefix=/tmp/

  #     - name: Run tests
  #       run: |
  #         export PATH="$HOME/.rbenv/versions/2.6.0/bin:/tmp/bin:$PATH"
  #         gem install bundler:2.0.2
  #         bundle install
  #         bundle exec rake install force_install
  #         git clone --depth=1 https://github.com/getgauge/gauge-tests
  #         cd gauge-tests
  #         gauge install
  #         gauge -v
  #         ./gradlew clean rubyFT

  ft-windows:
    name: Run FTs on windows
    runs-on: windows-latest
    env:
      RUBY_PLUGIN_BRANCH: grpc

    steps:
      - uses: actions/checkout@v1

      - name: Setup go 1.13.1
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.1

      - name: Install ruby 2.6.0.1 and bundler
        run: |
          choco install ruby --version 2.6.0.1
          gem install bundler:2.0.2

      - name: Install gauge
        run: |
          git clone --depth=1 https://github.com/getgauge/gauge.git
          cd gauge
          go run build/make.go --verbose
          go run build/make.go --install

      - name: Install gauge ruby
        shell: pwsh
        run: |
          go run ./make.go
          go run ./make.go --install

      - name: Run tests
        shell: pwsh
        run: |
          ${env:PATH} += ";C:\Program Files\gauge\bin"
          git clone --depth=1 https://github.com/getgauge/gauge-tests
          cd gauge-tests
          gauge install
          gauge -v
          .\gradlew.bat clean rubyFT

  lsp-linux:
    name: Run lsp on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    env:
      BUILD_FROM_COMMIT_HASH: 'true'

    steps:
      - uses: actions/checkout@v1
      - run: |
          echo "::set-env name=LATEST_COMMIT_HASH::${{ github.ref}}"

      - name: Install ruby on linux
        if: matrix.os != 'windows-latest'
        run: |
          sudo apt-get install -y libreadline-dev
          git clone https://github.com/rbenv/rbenv.git ~/.rbenv
          git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
          export PATH="$HOME/.rbenv/bin:$PATH"
          rbenv install 2.6.0
          echo "::add-path::$HOME/.rbenv/versions/2.6.0/bin"

      - name: Install ruby on windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install ruby --version 2.6.0.1

      - name: Setup go 1.13.1
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.1

      - name: Install gauge
        if: matrix.os != 'windows-latest'
        run: |
          echo $PATH
          ls ~/.rbenv/versions/2.6.0/bin
          git clone --depth=1 https://github.com/getgauge/gauge.git
          cd gauge
          go run build/make.go --verbose
          go run build/make.go --install --prefix=/tmp/
          echo "::add-path::/tmp/bin"

      - name: Install gauge
        if: matrix.os == 'windows-latest'
        run: |
          git clone --depth=1 https://github.com/getgauge/gauge.git
          cd gauge
          go run build/make.go --verbose
          go run build/make.go --install
          echo "::add-path::C:\\Program Files\\gauge\\bin"

      - name: Install bundler
        run: |
          gem install bundler:2.0.2

      - name: Install gauge ruby
        run: |
          go run ./make.go
          go run ./make.go --install

      - name: Prepare lsp tests
        run: |
          git clone --depth=1 --branch=local-gauge-ruby https://github.com/getgauge/gauge-lsp-tests
          cd gauge-lsp-tests
          npm install
          gauge install

      - name: Run lsp tests
        run: |
          cd gauge-lsp-tests
          gauge -v
          gauge run specifications/rename/refactor.spec:8 --tags='!knownIssue & (actions_on_project_load | actions_on_file_edit)' --env=ruby-wd --verbose

      - uses: actions/upload-artifact@master
        if: failure()
        with:
          name: logs-${{ matrix.os }}
          path: gauge-lsp-tests/logs

  lsp-windows:
    name: Run lsp on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    env:
      BUILD_FROM_COMMIT_HASH: 'true'
    steps:
      - uses: actions/checkout@v1
      - run: |
          echo "::set-env name=LATEST_COMMIT_HASH::${{ github.ref}}"

      - name: Install ruby on linux
        if: matrix.os != 'windows-latest'
        run: |
          sudo apt-get install -y libreadline-dev
          git clone https://github.com/rbenv/rbenv.git ~/.rbenv
          git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
          export PATH="$HOME/.rbenv/bin:$PATH"
          rbenv install 2.6.0
          echo "::add-path::$HOME/.rbenv/versions/2.6.0/bin"

      - name: Install ruby on windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install ruby --version 2.6.0.1

      - name: Setup go 1.13.1
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.1

      - name: Install gauge
        if: matrix.os != 'windows-latest'
        run: |
          echo $PATH
          ls ~/.rbenv/versions/2.6.0/bin
          git clone --depth=1 https://github.com/getgauge/gauge.git
          cd gauge
          go run build/make.go --verbose
          go run build/make.go --install --prefix=/tmp/
          echo "::add-path::/tmp/bin"

      - name: Install gauge
        if: matrix.os == 'windows-latest'
        run: |
          git clone --depth=1 https://github.com/getgauge/gauge.git
          cd gauge
          go run build/make.go --verbose
          go run build/make.go --install
          echo "::add-path::C:\\Program Files\\gauge\\bin"

      - name: Install bundler
        run: |
          gem install bundler:2.0.2

      - name: Install gauge ruby
        run: |
          go run ./make.go
          go run ./make.go --install

      - name: Prepare lsp tests
        run: |
          git clone --depth=1 --branch=local-gauge-ruby https://github.com/getgauge/gauge-lsp-tests
          cd gauge-lsp-tests
          npm install
          gauge install

      - name: Run lsp tests
        run: |
          cd gauge-lsp-tests
          gauge -v
          gauge run specifications\rename\refactor.spec:8 --tags='!knownIssue & (actions_on_project_load | actions_on_file_edit)' --env=ruby-wd --verbose

      - uses: actions/upload-artifact@master
        if: failure()
        with:
          name: logs-${{ matrix.os }}
          path: gauge-lsp-tests/logs